version: 2.1
jobs:
  build-orb:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "tools/package-lock.json" }}
      - restore_cache:
          keys:
            - cache-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install Python dependencies
          command: |
            pipenv sync --dev
      - run:
          name: Install JS dependencies
          command: |
            sudo apt-get update 
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
            cd tools
            npm install
      - run:
          name: Run unit tests
          command: |
            cd src/python
            pipenv run pylint --py3k *.py
            pipenv run coverage run -m pytest
      - run:
          name: Build orb
          command: |
            ./build_orb.sh
      - run:
          name: Validate orb
          command: |
            mkdir -p /tmp/circleci
            curl -fLSs https://circle.ci/cli | DESTDIR=/tmp/circleci bash
            /tmp/circleci/circleci orb validate dist/orb.yml
      - save_cache:
          key: cache-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local
            - ~/.cache
      - save_cache:
          key: cache-{{ checksum "tools/package-lock.json" }}
          paths:
            - ~/tools/node_modules
  build-test-app:  
    docker:
      - image: circleci/golang:1.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make the executable
          command: |
            cd tests/test_app
            go build -o demo-app src/main.go
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX_EC2}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            cd tests/test_app
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Test image
          command: |
            docker run -d -p 8080:8080 --name built-image $FULL_IMAGE_NAME
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8080 | grep "Hello World!"
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
workflows:
  build-deploy:
    jobs:
      - build-orb
      - build-test-app:
          requires:
            - build-orb
