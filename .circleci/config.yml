version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.4
  aws-ecs: sandbox/aws-ecs@dev:0.0.3
  circleci-cli: circleci/circleci-cli@0.1.2
jobs:
  build-orb:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "tools/package-lock.json" }}
      - restore_cache:
          keys:
            - cache-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install Python dependencies
          command: |
            pipenv sync --dev
      - run:
          name: Install JS dependencies
          command: |
            sudo apt-get update
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
            cd tools
            npm install
      - run:
          name: Run unit tests
          command: |
            cd src/python
            pipenv run pylint --py3k *.py
            pipenv run coverage run --source . -m pytest
            pipenv run coverage report --omit "*/test*"
      - run:
          name: Build orb
          command: |
            ./build_orb.sh
            git status dist/orb.yml
      - circleci-cli/install
      - run:
          name: Validate orb
          command: |
            circleci orb validate dist/orb.yml
      - save_cache:
          key: cache-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local
            - ~/.cache
      - save_cache:
          key: cache-{{ checksum "tools/package-lock.json" }}
          paths:
            - ~/tools/node_modules
  build-test-app:
    docker:
      - image: circleci/golang:1.8
    parameters:
      docker-image-name:
          description: "The name with which the built docker image will be tagged"
          type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make the executable
          command: |
            cd tests/test_app
            go build -o demo-app src/main.go
      - run:
          name: Build image
          command: |
            cd tests/test_app
            docker build -t << parameters.docker-image-name >> .
      - run:
          name: Test image
          command: |
            docker run -d -p 8080:8080 --name built-image << parameters.docker-image-name >>
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8080 | grep "Hello World!"
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar << parameters.docker-image-name >>
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  test-service-update:
    docker:
      - image: circleci/python:3.7.1
    parameters:
      aws-resource-name-prefix:
          description: "Prefix that the AWS resources for this launch type share"
          type: string
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="<< parameters.aws-resource-name-prefix >>"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="<< parameters.aws-resource-name-prefix >>-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="<< parameters.aws-resource-name-prefix >>-service"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME
      - aws-ecs/update-service:
          family: "<< parameters.aws-resource-name-prefix >>-service"
          cluster-name: "<< parameters.aws-resource-name-prefix >>-cluster"
          container-image-name-updates: "container=<< parameters.aws-resource-name-prefix >>-service,image-and-tag=$FULL_IMAGE_NAME"
          container-env-var-updates: "container=<< parameters.aws-resource-name-prefix >>-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=<< parameters.aws-resource-name-prefix >>-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          fail-on-verification-timeout: false
      - test-deployment:
          service-name: "<< parameters.aws-resource-name-prefix >>-service"
          cluster-name: "<< parameters.aws-resource-name-prefix >>-cluster"
commands:
  test-deployment:
    description: "Test the deployment"
    parameters:
      service-name:
          description: "Name of the ECS service"
          type: string
      cluster-name:
          description: "Name of the cluster"
          type: string
    steps:
      - run:
          name: Test deployment (Please manually tear down AWS resources after use, if desired)
          command: |
            set -x
            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster << parameters.cluster-name >> --services << parameters.service-name >> | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
            for attempt in {1..25}; do
              curl -s --retry 10 http://$ELB_DNS_NAME | grep -E "Hello World!.*${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}"
            done
workflows:
  build-deploy:
    jobs:
      - build-orb
      - build-test-app:
          name: build-test-app-for-ec2
          requires:
            - build-orb
          docker-image-name: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
      - build-test-app:
          name: build-test-app-for-fargate
          requires:
            - build-orb
          docker-image-name: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
      - test-service-update:
          name: test-update-service-command-for-ec2
          requires:
            - build-test-app-for-ec2
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
      - test-service-update:
          name: test-update-service-command-for-fargate
          requires:
            - build-test-app-for-fargate
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
      - aws-ecs/deploy-service-update:
          name: test-update-service-job-for-ec2
          docker-image-for-job: circleci/python:2.7.15
          requires:
            - test-update-service-command-for-ec2
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
          family: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          fail-on-verification-timeout: false
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
      - aws-ecs/deploy-service-update:
          name: test-update-service-job-for-fargate
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - test-update-service-command-for-fargate
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
          family: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          max-poll-attempts: 40
          poll-interval: 10
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
